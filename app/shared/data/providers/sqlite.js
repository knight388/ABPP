"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var sql = require("nativescript-sqlite");
core_1.Injectable();
var Sqlite = (function () {
    //https://stackoverflow.com/questions/36269197/sqlite-exception-from-delete
    function Sqlite() {
        var _this = this;
        //Queries
        this.qDbname = "abpp.db";
        this.qCreateSettingsTable = "CREATE TABLE IF NOT EXISTS settings (id INTEGER PRIMARY KEY AUTOINCREMENT, `key` VARCHAR(100), `value` TEXT)";
        this.qCreateFormsTable = "CREATE TABLE IF NOT EXISTS forms (id INTEGER PRIMARY KEY AUTOINCREMENT, form_id INTEGER, title TEXT, json TEXT, updated_at DATE DEFAULT (datetime('now','localtime')))";
        this.qCreateQueuesTable = "CREATE TABLE IF NOT EXISTS queue (id INTEGER PRIMARY KEY AUTOINCREMENT, form_id INTEGER, payload TEXT,  updated_at DATE DEFAULT (datetime('now','localtime')), status INTEGER DEFAULT 0)";
        // State in Queue
        this.PENDING_STATE = 0;
        this.PROCESSED_STATE = 1;
        //Getters
        this.qGetSetting = "SELECT * FROM settings WHERE `key`=?";
        this.qGetForm = "SELECT * FROM forms where form_id=?";
        this.qGetOneQueue = "SELECT * FROM queue WHERE form_id=?";
        this.qGetAllQueueStatus = "SELECT * FROM queue WHERE status=?";
        this.qGetAllForms = "SELECT * FROM forms";
        this.qGetAllSettings = "SELECT * FROM settings";
        this.qGetAllQueue = "SELECT * FROM queue";
        //Setters
        this.qSetSetting = "INSERT OR REPLACE INTO settings (id, `key`, `value`) VALUES ((SELECT id FROM settings WHERE `key`=?),?,?)";
        this.qSetForm = "INSERT OR REPLACE INTO forms (id, form_id, title, json) VALUES ((SELECT id FROM forms WHERE `form_id`=?),?,?,?)";
        this.qAddToQueue = "INSERT INTO queue (form_id, payload) VALUES (?,?)";
        this.qUpdateQueue = "UPDATE queue SET status=? WHERE form_id=?";
        this.qUpdateQueueById = "UPDATE queue SET status=? WHERE id=?";
        this.qClearQueue = "DELETE FROM queue WHERE 0=0";
        this.qClearForms = "DELETE FROM forms WHERE 0=0";
        this.qClearSettings = "DELETE FROM settings WHERE 0=0";
        this.qDeleteSetting = "DELETE FROM settings WHERE `key`=?";
        //DB Aanmaken + tabellen
        if (!this.isInstantiated) {
            //sql.deleteDatabase(this.qDbname);
            this.db = (new sql(this.qDbname));
            this.db.then(function (db) {
                db.execSQL(_this.qCreateSettingsTable).then(function (id) {
                }, function (error) {
                    console.error('Failed to create settings table!');
                });
                db.execSQL(_this.qCreateFormsTable).then(function (id) {
                }, function (error) {
                    console.error('Failed to create forms table!');
                });
                db.execSQL(_this.qCreateQueuesTable).then(function (id) {
                }, function (error) {
                    console.error('Failed to create queus table!');
                });
                //this.db = db;
                _this.isInstantiated = true;
            }, function (error) {
                console.error('Failed to open DB!');
            });
        }
    }
    Sqlite.prototype.getDbHandler = function () {
        return this.db;
    };
    Sqlite.prototype.setAuth = function (token_id) {
        return this.setSetting('auth', token_id);
    };
    Sqlite.prototype.getAuth = function () {
        return this.getSetting('auth');
    };
    Sqlite.prototype.clearAuth = function () {
        var _this = this;
        this.db.then(function (db) {
            db.execSQL(_this.qDeleteSetting, ['auth']).then(function () {
                return true;
            }, function (error) { return _this.errorHandler(error); });
        });
    };
    Sqlite.prototype.setForm = function (form) {
        var _this = this;
        this.db.then(function (db) {
            db.execSQL(_this.qSetForm, [form.Id, form.Id, form.Title, form]).then(function (value) {
                return true;
            }, function (error) { return _this.errorHandler(error); });
        });
    };
    Sqlite.prototype.getForm = function (form_id) {
        var _this = this;
        return this.db.then(function (db) {
            return db.get(_this.qGetForm, [form_id], function (err, row) {
                //row[2];
            });
        });
    };
    Sqlite.prototype.getAllForms = function () {
        var _this = this;
        return this.db.then(function (db) {
            return db.get(_this.qGetAllForms, function (err, rows) { });
        });
    };
    Sqlite.prototype.clearForms = function () {
        var _this = this;
        this.db.then(function (db) {
            console.log('clearQueue');
            db.execSQL(_this.qClearForms).then(function (rows) {
                console.log('deleted Form Rows Count = ' + rows);
                return rows;
            }, function (error) {
                console.log("DELETE ERROR", error);
            });
        });
    };
    Sqlite.prototype.getSettings = function () {
        var _this = this;
        return this.db.then(function (db) {
            return db.all(_this.qGetAllSettings).then(function (rows) {
                //console.dump(rows);
                return rows;
            }, function (error) { return _this.errorHandler(error); });
        });
    };
    Sqlite.prototype.getSetting = function (key) {
        var _this = this;
        return this.db.then(function (db) {
            return db.get(_this.qGetSetting, [key], function (err, row) {
                if (err) {
                    this.errorHandler(err);
                }
            });
        });
    };
    Sqlite.prototype.setSetting = function (key, value) {
        var _this = this;
        return this.db.then(function (db) {
            return db.execSQL(_this.qSetSetting, [key, key, value]).then(function (value) {
            }, function (error) { return _this.errorHandler(error); });
        });
    };
    Sqlite.prototype.setSettings = function (settings) {
        var _this = this;
        return this.db.then(function (db) {
            for (var key in settings) {
                db.execSQL(_this.qSetSetting, [key, key, settings[key]])
                    .then(function (res) { }, function (error) { return _this.errorHandler(error); });
            }
        });
    };
    Sqlite.prototype.clearSettings = function () {
        var _this = this;
        this.db.then(function (db) {
            console.log('clearQueue');
            db.execSQL(_this.qClearSettings).then(function (rows) {
                console.log('deleted Settings Rows Count = ' + rows);
                return rows;
            }, function (error) {
                console.log("DELETE ERROR", error);
            });
        });
    };
    Sqlite.prototype.addToQueue = function (form_id, payload) {
        var _this = this;
        return this.db.then(function (db) {
            return db.execSQL(_this.qAddToQueue, [form_id, payload]).then(function (id) {
                //returns ID
                console.log('added Queue Id = ' + id);
            }, function (error) { return _this.errorHandler(error); });
        });
    };
    Sqlite.prototype.getOneQueue = function (queu_id) {
        var _this = this;
        return this.db.then(function (db) {
            return db.get(_this.qGetOneQueue, [queu_id], function (err, row) { });
        });
    };
    /*
    original was execSQL
    GET SQL Statement should be start with all
    like db.all
    */
    Sqlite.prototype.getQueueWithStatus = function (status) {
        var _this = this;
        return this.db.then(function (db) {
            //return db.execSQL()
            return db.all(_this.qGetAllQueueStatus, [status]).then(function (rows) {
                console.log('getQueueWithStatus');
                console.log('rows =' + JSON.stringify({
                    rows: rows
                }));
                return rows;
            }, function (error) {
                console.log("SELECT ERROR", error);
            });
        });
    };
    Sqlite.prototype.getQueue = function () {
        var _this = this;
        return this.db.then(function (db) {
            return db.get(_this.qGetAllQueue, function (err, rows) { });
        });
    };
    Sqlite.prototype.updateQueueById = function (id) {
        var _this = this;
        return this.db.then(function (db) {
            console.log('updateQueueById');
            db.execSQL(_this.qUpdateQueueById, [_this.PROCESSED_STATE, id]).then(function (rows) {
                console.log('updated Queue Rows Count = ' + rows);
                return rows;
            }, function (error) {
                console.log("UPDATE ERROR", error);
            });
        });
    };
    Sqlite.prototype.clearQueue = function () {
        var _this = this;
        this.db.then(function (db) {
            console.log('clearQueue');
            db.execSQL(_this.qClearQueue).then(function (rows) {
                console.log('deleted Queue Rows Count = ' + rows);
                return rows;
            }, function (error) {
                console.log("DELETE ERROR", error);
            });
        });
    };
    Sqlite.prototype.clearAll = function () {
        this.clearForms();
        this.clearQueue();
        this.clearSettings();
    };
    Sqlite.prototype.errorHandler = function (error) {
        console.error("DataBase Handling Error: " + error);
    };
    return Sqlite;
}());
exports.Sqlite = Sqlite;
//# sourceMappingURL=data:application/json;base64,