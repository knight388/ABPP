"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var config_1 = require("../../config");
var sqlite_1 = require("../../data/providers/sqlite");
var FormService = (function () {
    function FormService(http, db) {
        this.http = http;
        this.db = db;
        this.id = config_1.Config.guid;
        this.auth = config_1.Config.authToken;
    }
    FormService.prototype.loadPage = function (page_id) {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        console.log(JSON.stringify({
            ID: page_id,
            GUID: this.auth
        }), { headers: headers });
        return this.http.post(config_1.Config.apiUrl + "GetPage", JSON.stringify({
            ID: page_id,
            GUID: this.auth
        }), { headers: headers })
            .map(function (response) {
            var data = response.json();
            data = JSON.parse(data.d);
            console.log("data:" + data);
            return data;
        })
            .catch(this.handleErrors)
            .publishReplay(1)
            .refCount();
    };
    FormService.prototype.loadMenu = function () {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.post(config_1.Config.apiUrl + "GetCustomer", JSON.stringify({
            ID: this.id,
            GUID: this.auth
        }), { headers: headers })
            .map(function (response) {
            var menuArray = [];
            var data = response.json();
            var settings = JSON.parse(data.d);
            settings.Menu.MenuItems.forEach(function (item) {
                menuArray.push({
                    id: item.Id, title: item.Title, page_id: item.Page_Id
                });
            });
            return menuArray;
        })
            .catch(this.handleErrors)
            .publishReplay(1)
            .refCount();
    };
    FormService.prototype.submitForm = function (form_id, payLoadJSON) {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        console.log('submitForm');
        if (!config_1.Config.isNetworkAvailable) {
            this.db.addToQueue(form_id, payLoadJSON);
            return;
        }
        //this.db.setForm(form_id, payLoadJSON);
        return this.http.post(config_1.Config.apiUrl + "SaveActionData", payLoadJSON, { headers: headers })
            .map(function (response) {
            console.log('response');
            var data = response.json();
            var submitResponse = JSON.parse(data.d);
            var json = JSON.stringify({
                response: submitResponse
            });
            console.log('response = ' + json);
            return json;
        })
            .catch(this.handleErrors)
            .publishReplay(1)
            .refCount();
    };
    FormService.prototype.handleErrors = function (error) {
        console.log(error.status + ' - ' + JSON.stringify(error.json()));
        return Rx_1.Observable.throw(error);
    };
    return FormService;
}());
FormService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, sqlite_1.Sqlite])
], FormService);
exports.FormService = FormService;
//# sourceMappingURL=data:application/json;base64,